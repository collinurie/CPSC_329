package Pente;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;

/**
 * @author mb5053
 *
 */
public class NetworkPlayer extends Player {
	
	private PrintWriter writer_; //to write moves to server
	private BufferedReader reader_; //to read moves from server
	private String IP_; //IP address for the server
	private int port_; //Port to connect to the server
	Socket connection_;
	
	private int[][] recentBoard_;
	/**
	 * @return the recentBoard
	 */
	public int[][] getRecentBoard () {
		return recentBoard_;
	}

	/**
	 * @param recentBoard the recentBoard to set
	 */
	public void setRecentBoard ( int[][] recentBoard ) {
		recentBoard_ = recentBoard;
	}

	private boolean isWon_;
//	/**
//	 * @param name
//	 */
//	protected NetworkPlayer ( String name ) {
//		super(name);
//		isComputer_ = false;
//		// needs to connect to server:
//		//	Create Reader
//		//	Create Writer
//	}
	
	/**
	 * Constructor for the Network player which sets up
	 * communications with the server.
	 * 
	 * @param name of player
	 * @param IP address for the server
	 * @param port to connect to the server
	 * @throws IOException
	 */
	public NetworkPlayer (String name) throws IOException {
		super(name);
		isComputer_ = false;
		isNetwork_ = true;
		recentBoard_ = new int[18][18];
		for (int i = 0; i < recentBoard_.length; i++) {
			for (int j = 0; j < recentBoard_[i].length; j++) {
				recentBoard_[i][j] = 0;
			}
		}
	}
	
	public int[][] getBoardArray() {
		return recentBoard_;
	}
	
	public boolean gameIsWon() {
		return isWon_;
	}
	
	public void initializeConnection(String IP, int port) throws IOException {
		IP_ = IP;
		port_ = port;
		Socket connection = new Socket(IP_, port_);
		writer_ = new PrintWriter(new OutputStreamWriter(connection.getOutputStream()));
		reader_ = new BufferedReader(new InputStreamReader(connection.getInputStream()));
	}

	@Override
	public boolean handleUserInput (Move move) {
		try {
			writer_.println("R" + move.getRow() + "C" + move.getCol() + "P" + move.getPlayer().getPieceNum());
			String response = reader_.readLine();
			if ( response.equals("success")) {
				// recieve the board from the server
				// send that board to the GUI
				return true;
			} else {
				// Update the GUI saying we got an invalid move
				return false;
			}
		} catch (IOException e) {
			// Leave this empty, means we just wait for more user input
			return false;
		}
		
//		return false;

	}
	
	
	public void initialHandling(int ruleType) throws IOException {
		writer_.println("pente");
		String read = reader_.readLine();
		if (read.equals("pente")) {
			read = reader_.readLine();
			if (read.equals("one")) {
				System.out.println("you are player 1.");
				writer_.println(ruleType);
			}
			else if (read.equals("two")) {
				System.out.println("You are player 2.");
			}
			else {
				System.out.println("Game Full @ networkplayer");
				return;
			}
		}
		else {System.out.println("Connection failed.");}
	}

	public void connect(int ruleType, String IP, int port) throws IOException {
		this.initializeConnection(IP,port);
		this.initialHandling(ruleType);
	}

	
	//basically we alternate between sending a move and awaiting a response move
	/**
	 * 
	 * @return
	 */
	public int[][] awaitResponse () {
		// TODO Auto-generated method stub
		return null;
	}
	

}
