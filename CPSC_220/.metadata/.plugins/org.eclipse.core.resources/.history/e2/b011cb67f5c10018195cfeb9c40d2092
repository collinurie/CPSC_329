import java.net.*;
import java.util.Scanner;
import java.io.*;

public class FileServer {

	public static final int LISTENING_PORT = 8000;
	public static File directory;
	
	
	///Users/collinurie/Desktop/
	
	
	public static void main(String[] args) {
		
		// set up directory information for file server
		String directoryName =  System.getProperty("user.home");
		if(args.length > 0)
			directoryName = args[0];
		directory = new File(directoryName);
		if(!directory.isDirectory())
			System.out.println("Error: \""+directoryName+"\" is not a directory");
		
		//create connection with client 
		ServerSocket clientListener;
		
		
		try {// try to make connection with a client
			clientListener  = new ServerSocket(LISTENING_PORT);
		}
		catch(IOException e) {
			System.out.println("Cannot open listening socket on port "+LISTENING_PORT);
			System.out.println("Error: "+ e);
			return;
		}// end try/catch
		
		// begin handling connection with client before passing responsibility to the handleConnection()
		System.out.println("Listening on port: "+LISTENING_PORT);
		System.out.println("Serving file from directory: "+ directoryName);
		
		while(true){
			Socket client;
			
			try {
				client = clientListener.accept();
			}
			catch(IOException e){
				System.out.println("An error has ocured on the listening socket");
				System.out.println("Shutting donw program");
				System.out.println("Error"+e);
				return;
			}
			handleConnection(client);
		}// end loop
		
		
	}// end main
	
	/**
	 * Takes the socket that is being used to connect to the client and handles all of the communication
	 * between the server and the client. This method handles all exceptions. 
	 * @param client
	 */
	private static void handleConnection(Socket client) {
		
		System.out.println("\n\n");
		try {
			InetAddress clientAddress = client.getInetAddress();
			System.out.println("Accepted connection from IP address: "+ clientAddress.getHostAddress());
			
			// bufferedReader will read the input stream coming from the client
			BufferedReader in = new BufferedReader(
					new InputStreamReader(client.getInputStream()));
			
			OutputStream out = client.getOutputStream();
			String command = in.readLine();
			
			if(command == null)
				throw new IOException("No data was sent from the client.");
			if(command.equals("LIST")) {
				//NetUtil.writeASCII("You have made a LIST request!!!!!\n", out);
				NetUtil.writeASCII("OK", out);
				NetUtil.writeCRLF(out);
				File[] files = directory.listFiles();
				for (File f : files) {
					if (f.isFile() && f.canRead()) {
						NetUtil.writeASCII( NetUtil.encodeURL(f.getName()), out );
						NetUtil.writeCRLF(out);
					}					
				}
				System.out.println("Sent directory listing.");
			}// end list 
			else if(!command.contains("HTTP/1.1")) {
				NetUtil.writeASCII("ERROR", out);
				NetUtil.writeCRLF(out);
				NetUtil.writeASCII("HTTP/1.1 505 Version Not Suported ", out);
				NetUtil.writeCRLF(out);
				System.out.println("version not supported error request: "+command);
			}
			else if(command.startsWith("GET")) {
				String fn = command.substring(4);
				fn = fn.substring(0,fn.indexOf(' '));
				String fileName = URLDecoder.decode(fn, "UTF-8");
				File file = new File(directory, fileName);
				if(file.isFile() && file.canRead()) { // if the filename given by the user is valid
					NetUtil.writeASCII("HTTP/1.1 200 OK", out);// confirm file is valid
					NetUtil.writeCRLF(out);
					InputStream fileIn = new FileInputStream(file);
					NetUtil.copyStream(fileIn, out);
					fileIn.close();
					System.out.println("File has been sent.");
				}
				else if(file.isFile() && !file.canRead()) {
					NetUtil.writeASCII("ERROR", out);
					NetUtil.writeCRLF(out);
					NetUtil.writeASCII("HTTP/1.1 403 Forbidden ", out);
					NetUtil.writeCRLF(out);
					System.out.println("Forbidden file error request: "+command);
				}// forbidden 403
				else if(!file.isFile()) {
					NetUtil.writeASCII("ERROR", out);
					NetUtil.writeCRLF(out);
					NetUtil.writeASCII("HTTP/1.1 404 Not Found ", out);
					NetUtil.writeCRLF(out);
					System.out.println("Unknown file error request: "+command);
				}// not found error 
			}// end GET command check
			else if(command.startsWith("POST") || command.startsWith("HEAD")) {
				NetUtil.writeASCII("ERROR", out);
				NetUtil.writeCRLF(out);
				NetUtil.writeASCII("HTTP/1.1 501 Not Implemented ", out);
				
			}
			else {
				NetUtil.writeASCII("ERROR", out);
				NetUtil.writeCRLF(out);
				NetUtil.writeASCII("HTTP/1.1 400 Bad request ", out);
				NetUtil.writeCRLF(out);
				System.out.println("Bad Request error request: "+command);
			}
	
		}
		catch(IOException e) {
			System.out.println("Error: "+e);
			return;
		}// end try/catch
		catch(Exception e) {
			/**
			 * TODO: find out how to send a HTTP/1.1 500 Internal Server Error
			 * 		 can't send outside of try catch
			 */
		}
		
		finally {
			try {
				client.close();
			}
			catch(Exception e) {/** do nothing*/}
		}// end finally 
		
		
	}
	
	
	
	
	
}
